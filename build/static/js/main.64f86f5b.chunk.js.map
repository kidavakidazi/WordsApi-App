{"version":3,"sources":["components/header/header.js","components/word-add-form/word-add-form.js","components/wapi-service/wapi-service.js","components/word-details/word-details.js","components/app/app.js","index.js"],"names":["Header","className","to","Button","size","color","WordAddForm","addWord","word","setWord","useState","onSubmit","e","preventDefault","TextField","id","label","type","variant","onChange","target","value","require","config","WapiService","wordLabel","response","fetch","json","getDefinition","wordName","this","getData","then","res","definitions","definition","getPartOfSpeech","partOfSpeech","catch","getSynonyms","synonyms","getAntonyms","antonyms","getSimilar","similarTo","getSyllables","syllables","list","toString","replace","getPronunciation","pronunciation","all","getTypeOf","typeOf","useStyles","makeStyles","theme","root","width","marginLeft","marginRight","marginBottom","borderRadius","boxShadow","textAlign","title","fontSize","pos","paper","margin","spacing","padding","palette","text","secondary","paperMain","wapiService","WordDetails","classes","useContext","WordContext","setLabel","similarWords","setSimilarWords","setDefinition","setSyllables","setPronunciation","setPartOfSpeech","synonymsList","setSynonymsList","antonymsList","setAntonymsList","setTypeOf","fetchData","async","syn","map","el","onClick","changeLabel","Paper","ant","sim","typeOfItem","useEffect","Card","CardContent","Typography","component","grid","Grid","container","direction","justify","item","xs","elevation","display","justifyContent","flexWrap","listStyle","React","createContext","App","context","setContext","storage","setStorage","err","console","log","dataStorage","localStorage","getItem","JSON","parse","setItem","stringify","changeContext","SearchedWords","viewedWordsArray","viewedWords","slice","Chip","clickable","Provider","path","exact","toUpperCase","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64f86f5b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport './header.css'\r\n\r\nconst Header = () => {\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <Link to=\"/\">\r\n        <Button className=\"header--button__home\" size='large' color='primary'>Home</Button>\r\n      </Link>\r\n      <Link to=\"/word\">\r\n        <Button className=\"header--button__word\" size='large' color='primary'>Word</Button>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport './word-add-form.css';\r\n\r\nconst WordAddForm = ({ addWord }) => {\r\n  const [word, setWord] = useState(\"\");\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addWord(word);\r\n    setWord(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"word-add-form d-flex\"\r\n          onSubmit={handleSubmit}>\r\n      <TextField id=\"outlined-search\"\r\n                 label=\"Type any word...\"\r\n                 type=\"text\"\r\n                 variant=\"outlined\"\r\n                 onChange={e => setWord(e.target.value)}\r\n                 value={word}/>\r\n      <Button variant=\"contained\" color=\"secondary\" type=\"submit\" value=\"Submit\">\r\n        Search\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default WordAddForm;\r\n","require('dotenv').config();\r\n\r\nexport default class WapiService {\r\n\r\n  async getData(wordLabel) {\r\n    const response = await fetch(`/.netlify/functions/getApiKey?wordLabel=${wordLabel}`);\r\n    return await response.json();\r\n  };\r\n\r\n  getDefinition(wordName) {\r\n    return this.getData(`${wordName}/definitions`)\r\n      .then(res => res.definitions[0].definition);\r\n  };\r\n\r\n  getPartOfSpeech(wordName) {\r\n    return this.getData(`${wordName}/definitions`)\r\n      .then(res => res.definitions[0].partOfSpeech)\r\n      .catch(() => 'No info');\r\n  };\r\n\r\n  getSynonyms(wordName) {\r\n    return this.getData(`${wordName}/synonyms`)\r\n      .then(res => res.synonyms)\r\n      .catch(() => 'No info');\r\n  };\r\n\r\n  getAntonyms(wordName) {\r\n    return this.getData(`${wordName}/antonyms`)\r\n      .then(res => res.antonyms)\r\n      .catch(() => 'No info');\r\n  };\r\n\r\n  getSimilar(wordName) {\r\n    return this.getData(`${wordName}/similarTo`)\r\n      .then(res => res.similarTo)\r\n      .catch(() => 'No info');\r\n  };\r\n\r\n  getSyllables(wordName) {\r\n    return this.getData(wordName)\r\n      .then(res => res.syllables.list)\r\n      .then(res => res.toString())\r\n      .then(res => res.replace(/,/g, '•'))\r\n      .catch(() => 'No info');\r\n  };\r\n\r\n  getPronunciation(wordName) {\r\n    return this.getData(wordName)\r\n      .then(res => res.pronunciation.all)\r\n      .catch(() => 'No info');\r\n  };\r\n\r\n  getTypeOf(wordName) {\r\n    return this.getData(`${wordName}/typeOf`)\r\n      .then(res => res.typeOf)\r\n      .catch(() => 'No info');\r\n  };\r\n};\r\n","import React, { useState, useContext, useEffect} from \"react\";\r\nimport { WordContext} from \"../app/app\";\r\nimport WapiService from \"../wapi-service/wapi-service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '30%',\r\n    marginLeft: '35%',\r\n    marginRight: '35%',\r\n    marginBottom: '50px',\r\n    borderRadius: 16,\r\n    boxShadow: '0 8px 16px 0 #BDC9D7',\r\n    textAlign:'center',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(1),\r\n    padding: theme.spacing(1),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  paperMain: {\r\n    fontSize: 20,\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nconst wapiService = new WapiService();\r\n\r\nconst WordDetails = () => {\r\n\r\n  const classes = useStyles();\r\n  const word = useContext(WordContext)\r\n  const [ label, setLabel ] = useState('')\r\n  const [ similarWords, setSimilarWords ] = useState('')\r\n  const [ definition, setDefinition ] = useState('')\r\n  const [ syllables, setSyllables ] = useState('')\r\n  const [ pronunciation, setPronunciation] = useState('')\r\n  const [ partOfSpeech, setPartOfSpeech ] = useState('')\r\n  const [ synonymsList, setSynonymsList ] = useState('')\r\n  const [ antonymsList, setAntonymsList ] = useState('')\r\n  const [ typeOf, setTypeOf ] = useState('')\r\n\r\n  const fetchData = async (wordName) => {\r\n\r\n    setDefinition(await wapiService.getDefinition(wordName));\r\n    setPartOfSpeech(await wapiService.getPartOfSpeech(wordName));\r\n    setSyllables(await wapiService.getSyllables(wordName));\r\n    setPronunciation(await wapiService.getPronunciation(wordName));\r\n\r\n    const synonyms = await wapiService.getSynonyms(wordName);\r\n    const syn = synonyms.map(el => (\r\n        <Link to=\"/word\" onClick={() => changeLabel(el)}>\r\n          <Paper className={classes.paper}>{el}</Paper>\r\n        </Link>\r\n    ));\r\n      setSynonymsList(syn);\r\n\r\n    const antonyms = await wapiService.getAntonyms(wordName);\r\n    const ant = antonyms.map(el => (\r\n      <Link to=\"/word\" onClick={() => changeLabel(el)}>\r\n        <Paper className={classes.paper}>{el}</Paper>\r\n      </Link>\r\n    ));\r\n      setAntonymsList(ant);\r\n\r\n    const similar = await wapiService.getSimilar(wordName);\r\n    const sim = similar.map(el => (\r\n      <Link to=\"/word\" onClick={() => changeLabel(el)}>\r\n        <Paper className={classes.paper}>{el}</Paper>\r\n      </Link>\r\n    ));\r\n      setSimilarWords(sim);\r\n\r\n    const typeOfItems = await wapiService.getTypeOf(wordName);\r\n    const typeOfItem = typeOfItems.map(el => (\r\n      <Paper className={classes.paper}>{el}</Paper>\r\n    ));\r\n      setTypeOf(typeOfItem);\r\n  };\r\n\r\n  const changeLabel = (el) => {\r\n    setLabel(el);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(word);\r\n  }, [word]);\r\n\r\n  useEffect(() => {\r\n    fetchData(label);\r\n  }, [label]);\r\n\r\n  return (\r\n    <>\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {syllables}\r\n          </Typography>\r\n          <Typography className={classes.pos} color=\"textSecondary\">\r\n            {partOfSpeech}\r\n          </Typography>\r\n          <Typography variant=\"body2\" component=\"p\">\r\n            {definition}\r\n            <br />\r\n            {pronunciation}\r\n          </Typography>\r\n        </CardContent>\r\n      </Card>\r\n      <div className={classes.grid}>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"space-around\">\r\n          <Grid item xs={3}>\r\n            <Grid\r\n              container\r\n              direction=\"column\">\r\n                <Paper className={classes.paperMain} elevation={3}>Synonyms</Paper>\r\n              {synonymsList}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Grid\r\n              container\r\n              direction=\"column\">\r\n                <Paper className={classes.paperMain} elevation={3}>Antonyms</Paper>\r\n              {antonymsList}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Grid\r\n              container\r\n              direction=\"column\">\r\n                <Paper className={classes.paperMain} elevation={3}>Similar to</Paper>\r\n              {similarWords}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <Grid\r\n              container\r\n              direction=\"column\">\r\n                <Paper className={classes.paperMain} elevation={3}>Type of</Paper>\r\n              {typeOf}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WordDetails;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Header from \"../header/header\";\r\nimport WordAddForm from \"../word-add-form/word-add-form\";\r\nimport WordDetails from \"../word-details/word-details\";\r\nimport WapiService from \"../wapi-service/wapi-service\";\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport './app.css';\r\n\r\nrequire('dotenv').config();\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexWrap: 'wrap',\r\n    listStyle: 'none',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nexport const WordContext = React.createContext('');\r\nconst wapiService = new WapiService();\r\n\r\nconst App = () => {\r\n\r\n  const [word, setWord] = useState('');\r\n  const [context, setContext] = useState('');\r\n  const [definition, setDefinition] = useState('');\r\n  const [storage, setStorage] = useState([]);\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setDefinition(await wapiService.getDefinition(word));\r\n      } catch (err) {\r\n          console.log(err)\r\n        if (word !== '') {\r\n          setDefinition('No info, try another one');\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n    setStorage([...storage, word]);\r\n  }, [word]);\r\n\r\n  const addWord = (word) => {\r\n    setWord(word);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const dataStorage = localStorage.getItem('lastWords');\r\n    if (dataStorage) {\r\n      setStorage(JSON.parse(dataStorage));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('lastWords', JSON.stringify(storage));\r\n  });\r\n\r\n  const changeContext = (el) => {\r\n    setContext(el);\r\n  };\r\n\r\n  const SearchedWords = () => {\r\n    let viewedWordsArray = localStorage.getItem('lastWords');\r\n    let viewedWords = JSON.parse(viewedWordsArray);\r\n    if (!viewedWords) return null;\r\n    else {\r\n      let lastViewedWords = viewedWords.slice(-5)\r\n      return  lastViewedWords.map(el => (\r\n          <Link to=\"/word\" onClick={() => changeContext(el)}>\r\n              <Chip label={el} component=\"a\" clickable />\r\n          </Link>\r\n      )).slice(1);\r\n    }\r\n  };\r\n\r\n  const WordPage = () => {\r\n    return  (\r\n      <>\r\n        <WordAddForm addWord={addWord} />\r\n        <div className={classes.root}>\r\n            <SearchedWords />\r\n        </div>\r\n        <div className=\"word--definition\"\r\n             onClick={changeContext(word)}>\r\n          <Link to=\"/word\">\r\n            {word.toUpperCase()} {definition}\r\n          </Link>\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"header\">\r\n        <Header />\r\n      </div>\r\n      <WordContext.Provider value={context}>\r\n        <Route path=\"/\"\r\n               exact\r\n               component={WordPage} />\r\n        <Route path=\"/word\"\r\n               component={WordDetails}/>\r\n      </WordContext.Provider>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/app';\r\n\r\nReactDOM.render(<App />,\r\n    document.getElementById('root'));"],"sourceRoot":""}